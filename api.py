import shutil
from fastapi import FastAPI, UploadFile, File
from typing import List

app = FastAPI()

# Координаты траекторий движения на предложенных полях
# "АгроКод", "Череповец", "Москва", "Беларусь"

AgroCode = {'arr': [[53.21268092272585, 26.97198642737419], [53.212536266413544, 26.972278886898152],
                    [53.212399149443236, 26.972546165405287], [53.21206373341792, 26.97316975530047],
                    [53.21185412399693, 26.97355160743415], [53.2114577374993, 26.974238869329014],
                    [53.21150351601854, 26.974302541328694], [53.2115644821588, 26.97442970546365],
                    [53.21163686587346, 26.97460795108988], [53.21166734885956, 26.974716229462217],
                    [53.21169018415648, 26.97481155759733], [53.21167111883866, 26.97491983596967],
                    [53.211598735181866, 26.97507254085026], [53.211533999099515, 26.97514250810415],
                    [53.21149199060771, 26.975250786476487], [53.21143867207804, 26.975307983357556],
                    [53.21137005803414, 26.975333524103192], [53.21135487029528, 26.97540978661128],
                    [53.21138147576335, 26.975524360237827], [53.21144631979042, 26.975734441863896],
                    [53.21154541678503, 26.975957113998376], [53.211606382865675, 26.976090753251945],
                    [53.2116826442013, 26.976186261251463], [53.21173219245396, 26.976211622132695],
                    [53.21178163293592, 26.976192736370074], [53.2118540162837, 26.97618644111587],
                    [53.21193027717856, 26.976135539489007], [53.21204456055357, 26.976135539489007],
                    [53.2121474261017, 26.97606557223512], [53.212208499038034, 26.97600190023544],
                    [53.21226558653648, 26.975950998608575], [53.21233032151344, 26.97590009698171],
                    [53.21242564655105, 26.975887326608895], [53.21268092272585, 26.975791998473778],
                    [53.21334786494614, 26.975582096712117], [53.21345072736508, 26.97553749033946],
                    [53.21350415109988, 26.97549935908541], [53.21353463275743, 26.975448457458548],
                    [53.213549819723596, 26.97521931020546], [53.21353075523329, 26.97511750695173],
                    [53.213542172386695, 26.97496480207114], [53.21351933807686, 26.974793031563525],
                    [53.21349650375483, 26.974665687564162], [53.21345460489646, 26.974417474684053],
                    [53.21337834671488, 26.974258474549252], [53.213363051978504, 26.974182032176753],
                    [53.213321152989614, 26.97403562255037], [53.21327548412216, 26.973895688042596],
                    [53.213199225621736, 26.97338649190955], [53.21310777986812, 26.97308108214837],
                    [53.213069650485615, 26.972941147640594], [53.21303152106918, 26.972832869268252],
                    [53.21299339161882, 26.97262278764219], [53.21295536984497, 26.972520984388463],
                    [53.21291724032683, 26.972431951507556], [53.212875340901945, 26.972323852999622],
                    [53.212860045986005, 26.972202804254465], [53.212860045986005, 26.972164673000414],
                    [53.212783786746115, 26.97176375523971], [53.21268092272585, 26.97198642737419]]}

Cherepovec = {'arr': [(37.855249643325806, 59.18349737628452), (37.855281829833984, 59.184200892635495),
                      (37.85541191697121, 59.184609753333625), (37.85550445318222, 59.18465647014465),
                      (37.855586260557175, 59.18464753899454), (37.85563722252846, 59.18459463905756),
                      (37.855696231126785, 59.184536929942006), (37.855775356292725, 59.18450876236211),
                      (37.85581827163696, 59.18454242605245), (37.85581558942795, 59.184648913017774),
                      (37.85584777593613, 59.18470524792331), (37.8559148311615, 59.1847876890811),
                      (37.85637080669403, 59.18501989727326), (37.85727448244188, 59.185417303401685),
                      (37.85740613937378, 59.18545133315721), (37.85757780075073, 59.18541286138874),
                      (37.85784602165222, 59.18541560937366), (37.85855412483215, 59.18559689001431),
                      (37.859766483306885, 59.185838710537304), (37.86134362220764, 59.18602007480664),
                      (37.86321043968201, 59.18628387566201), (37.86331721282477, 59.18626746734412),
                      (37.86341965198517, 59.186204271907485), (37.86361813545227, 59.18601457893385),
                      (37.863929271698, 59.18583321463535), (37.864235043525696, 59.18578933326132),
                      (37.86455154418945, 59.18579474329677), (37.86484122276306, 59.1858716859306),
                      (37.864986062049866, 59.18589925127402), (37.86514163017273, 59.18589366950847),
                      (37.865227460861206, 59.18586352795868), (37.86529183387756, 59.185811231018604),
                      (37.86532402038574, 59.185624369705366), (37.8654420375824, 59.18539903558637),
                      (37.86561369895935, 59.185234156021416), (37.8658926486969, 59.185091259755),
                      (37.86635398864746, 59.18503080346241), (37.866482734680176, 59.18497034706288),
                      (37.866740226745605, 59.18467905563885), (37.866986989974976, 59.184250358084014),
                      (37.86710500717163, 59.18404699967116), (37.867255210876465, 59.18385463249127),
                      (37.867480516433716, 59.18369524172196), (37.86751877062818, 59.18361358688589),
                      (37.867528796195984, 59.18355792116891), (37.867493497286205, 59.183506414044665),
                      (37.86742687225342, 59.183439751195664), (37.86744832992554, 59.18327202814113),
                      (37.867491245269775, 59.183046764392394), (37.867738008499146, 59.18274437789536),
                      (37.8679633140564, 59.18258498194822), (37.86805987358093, 59.182398102994554),
                      (37.86812424659729, 59.182211223019095), (37.86814033985138, 59.182076644756854),
                      (37.86793649196625, 59.18193648355284), (37.86767363548279, 59.18183196345736),
                      (37.86730885505676, 59.18177150139917), (37.86691188812256, 59.181711039234),
                      (37.8663432598114, 59.18161759749571), (37.8658926486969, 59.18146369289925),
                      (37.8654420375824, 59.1812658145427), (37.86411166191101, 59.18111190836224),
                      (37.86339282989502, 59.18111190836224), (37.862792015075684, 59.18106793504056),
                      (37.86219120025635, 59.180974491544106), (37.86115050315857, 59.180930518045635),
                      (37.8603458404541, 59.18088104779222), (37.85979866981506, 59.18082608076003),
                      (37.85921394824982, 59.1808014314528), (37.85865068435669, 59.180864557691834),
                      (37.858232259750366, 59.180930518045635), (37.85780310630798, 59.18100747163086),
                      (37.857255935668945, 59.18113389500189), (37.856537103652954, 59.18119435818796),
                      (37.85611867904663, 59.181216344774555), (37.85586655139923, 59.181263152109075),
                      (37.855743169784546, 59.18134276737304), (37.85558223724365, 59.1815956111672),
                      (37.855528593063354, 59.18184845309102), (37.85533547401428, 59.18226069134734),
                      (37.855249643325806, 59.182464060388995), (37.85517454147339, 59.18290377309914),
                      (37.85521745681763, 59.18315110901265), (37.855249643325806, 59.18349737628452)]}

Moscow = {'arr': [(37.55957365036011, 55.83777431977461), (37.558919191360474, 55.839090683265816),
                  (37.5611937046051, 55.83956058712757), (37.56133317947388, 55.83951540431072),
                  (37.561907172203064, 55.83811169864664), (37.55972921848297, 55.837689974599186),
                  (37.55957365036011, 55.83777431977461)]}

Belarus = {'arr': [(27.375474125146866, 53.26050256167628),
                   (27.35642910003662, 53.26785667156712),
                   (27.356284260749817, 53.26796896274332),
                   (27.356211841106415, 53.26812616989456),
                   (27.356276214122772, 53.26830102206747),
                   (27.35879346728325, 53.27059649207724),
                   (27.359073758125305, 53.270688725368615),
                   (27.359261512756348, 53.270848328594084),
                   (27.359446585178375, 53.27097585034097),
                   (27.359661161899567, 53.27100552515833),
                   (27.35993206501007, 53.27091329255041),
                   (27.360130548477173, 53.270808227337206),
                   (27.37852782011032, 53.26355730189264),
                   (27.37863779067993, 53.263510776498414),
                   (27.378715574741364, 53.26343376883811),
                   (27.378734350204468, 53.26337440867199),
                   (27.37871825695038, 53.26331986141966),
                   (27.375804036855698, 53.260529837107896),
                   (27.375715523958206, 53.26048892395395),
                   (27.37559348344803, 53.26047769288523),
                   (27.375474125146866, 53.26050256167628)]}


# get-запрос на вывод результата построения траектории движения
# алгоритмами на одном из 4-х предложенных полей
@app.get('/fields')
def get_field_border(field_name: str = 'AgroCode'):
    if field_name == 'AgroCode':
        return {'arr': AgroCode['arr']}
    elif field_name == 'Cherepovec':
        return {'arr': Cherepovec['arr']}
    elif field_name == 'Moscow':
        return {'arr': Moscow['arr']}
    elif field_name == 'Belarus':
        return {'arr': Belarus['arr']}
    return {'arr': AgroCode['arr']}


#     get-запрос на отрисовку траектории движения транспортного средства с заданными параметрами
#
#     Расстояние между центром робота и границей поля aka радиус сеялки в метрах
#     [0; inf) - крутилка (1, 10, learning rate = 0,1) - метры
#     дефолт переменная - obstacle_size = 7 float
#
#     Радиус поворота в метрах [0; inf)
#     angle_radius = 6.0 - крутилка (1, 20, learning rate =0,1 ) - метры float
#
#     Степень сглаживания [1; inf)
#     smoothing = 1 крутилка (1,10, learning rate = 1) int
#
#     Степень упрощения пути алгоритмом Рамера-Дугласа-Пекера (0; inf)
#     rdp_epsilon = 20 -  крутилка (1, 20, learning rate =0,1 ) - метры float
#
#     Точка, рядом с которой должен начинаться путь
#     start_point = (26.973208407171384, 53.21215603723456) float,float


@app.get('/draw_route')
def draw_route(obstacle_size,
               angle_radius,
               rdp_epsilon=20,
               start_point_x=26.973208407171384,
               start_point_y=53.21215603723456):
    # execute_algorithm__function()
    result_coord_array = []
    return {'arr': result_coord_array}


# загрузка пользовательских вариантов полей
# 4 файла: .dbf, .prj, .shp, .shx
@app.post('/files')
def upload_files(files: List[UploadFile] = File(...)):
    for file in files:
        with open(f'{file.filename}', 'wb') as buffer:
            shutil.copyfileobj(file.file, buffer)
    return {'file_name': file.filename}
